(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'taken_place'"
p3
sS'layer'
p4
S'/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    redirect(URL(\'talk\'))\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\nto_say_list = {\'ask_job\':False,\n               \'ask_age\':False,\n               \'ask_relationship\':False,\n               \'ask_company\':False}\n\ndef generate_object_of_topic(topic):\n    if topic == \'ask_job\':\n        return talk_job_handler()\n    elif topic == \'ask_age\':\n        return talk_age_handler()\n    elif topic == \'ask_relationship\':\n        return talk_relationship_handler()\n    elif topic == \'ask_company\':\n        return talk_company_handler()\n\nclass talk_topic_handler(object):\n    def __init__(self):\n        self.to_say_sentence = [\n        ]\n        pass\n    def what_to_say(self):\n        return \'lets talk about this topic \'\n        pass\n\n\nclass  talk_company_handler(talk_topic_handler):\n    pass\n\nclass  talk_relationship_handler(talk_topic_handler):\n    pass\n\nclass  talk_age_handler(talk_topic_handler):\n    pass\n\nclass talk_job_handler(talk_topic_handler):\n    def __init__(self):\n        #get current information about this topic\n\n        self.to_say_priority = {\'1\':\'ask_job_name\',\n                                \'2\':\'ask_working_hour\',\n                                \'3\': \'ask_number_of_member_in_team\'}\n        self.to_say_sentence =["what is your job?",\n                               "what are u doing ?",\n                               "I think you\'re working, tell me what\'s your job ?"]\n    def what_to_say(self):\n        """\n        get the info about current topic\n        decide what to say\n        update\n        """\n        from random import randint\n        import pdb; pdb.set_trace()\n        return self.to_say_sentence[randint(0,2)]\n\n\n\n\nclass talk_about_me_handler(object):\n    def __init__(self,current_topic, topic_list):\n        self.current_topic = current_topic\n        self.topic_list = topic_list\n        return\n    def _intent_to_say(self, intention_list):\n        if self.current_topic == None:\n            #start new topic\n            for key in intention_list.keys():\n                if intention_list[key] == False:\n                    #talk about it\n                    self.current_topic = key\n                    return key\n            return False\n        else:\n            #being dicussing of a topic\n            return self.current_topic\n\n    def _update_status(self, intent_info):\n        """\n        currently let status be off after one sentence\n        """\n        session.current_topic = None\n        session.topic_list[intent_info ] = True\n\n    def _sentence_to_say(self, intent_info):\n        self.dicussing_topic_obj = generate_object_of_topic(intent_info)\n        sentence = self.dicussing_topic_obj.what_to_say()\n        return sentence\n\n    def what_to_say_next(self):\n        intent_info = self._intent_to_say(self.topic_list)\n        if intent_info:\n            sentence_to_say = self._sentence_to_say(intent_info)\n        else:\n            return \'end of talking\'\n        self._update_status(intent_info)\n        return  sentence_to_say\n\n\n\ndef talk():\n    print\'start\'\n    #initialize session storage info\n    if type(session.topic_list) != dict:\n        session.topic_list = to_say_list\n    talk_about_me = talk_about_me_handler(session.current_topic, session.topic_list)\n    print talk_about_me.what_to_say_next()\n    print session.topic_list\n\n    return dict()\n\ndef test_STT():\n    return dict()\n\ndef handle_user_saying_json():\n    data = request.vars.keys()[0]\n    import json\n    json_data = json.loads(data)\n    #from now json_data act like a dict..nail it\n    intent = json_data[\'outcomes\'][0][\'intent\']\n    entity = json_data[\'outcomes\'][0][\'entities\']\n    value = entity[\'taken_place\'][0][\'value\']\n    import pdb; pdb.set_trace()\n    return get_answer(json_data[\'outcomes\'][0][\'intent\'])\n\ndef handle_user_saying():\n    return get_asnwer(request.vars.info)\n\n\n\ndef get_answer(intention):\n    if \'ask_age\' in intention:\n        return \'im 32 years old\'\n    elif \'ask_name\' in intention:\n        return \'im Huy\'\n    elif \'ask_relationship\' in intention:\n        return \'im not. But i have a girl friend now\'\n    elif \'ask_if_someone_have_a_meal\' in  intention:\n        return \'im looking forward to my delicious dinner\'\n    elif \'ask_when_have_a_meal\' in intention:\n        return \'i cant remember\'\n    elif \'ask_job\' in intention:\n        return " i\'m a software engineer"\n    elif \'ask_company\' in intention:\n        return "im working for vkx company"\n\n    return \'Sorry, currently i could talk about my job, my age only\'\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\nclass place_obj(object):\n    def __init__(self, place):\n        """\n        define place, destination\n        load from db\n        """\n        self.intialize_info_from__name(place, \'\',\'\',\'\')\n\n    def get_position(self):\n        return self.position\n    def where_is_it(self):\n        return self.position\n\n    def intialize_info_from__name(self, name, position, size, access_time):\n        """\n        should generate this infor from db or internet db\n        """\n        self.what_for =\'work\'\n        self.position = \'van dien\'\n        self.size = \'big\'\n        self.name = name\n\n\n    def access_method(self):\n        return \'bike, car\'\n    def access_time(self):\n        return \'8-12AM, 13-17 PM\'\n\n\n\nclass user_obj(object):\n    def __init__(self, name):\n        # load from DB\n        if name ==\'huy\':\n            self.intialize_info(\'huy\', \'33\', \'programming\', \'ho dac di\')\n\n\nclass user_obj(object):\n    def __init__(self, name):\n        # load from DB\n        if name ==\'huy\':\n            self.intialize_info(\'huy\', \'33\', \'programming\', \'ho dac di\')\n\n    def intialize_info(self, name, age, work, position):\n        self.name = name\n        self.age = age\n        self.work = work\n        self.position = work\n        pass\n    def get_position(self):\n        return self.position\n    def get_age(self):\n        return self.age\n\n    def get_available_time(self):\n        return \'1 2 3 4 5 6 7 8 9 10\'\n\n\nclass go_to_place(object):\n    """\n    handle talk about place\n    """\n    def __init__(self, place):\n        self.to_do_list = {\'time\':\'\',\n                           \'vehicle\':\'\'}\n        self.expected_saying =None\n        #intialize place object\n        self.initialize_place_info(place)\n        self.user = user_obj(\'huy\')\n\n    def initialize_user_info(self, user):\n        """\n        create user info\n        """\n        self.user = user_obj()\n\n        pass\n\n    def _thinking_about_time_at_destination(self, time):\n        """\n        - check if timing is good to enter the place\n        - check if timing is good to go to their place\n        - check the impact of time with user check user time_constraint\n        """\n        if time in self.place.access_time():\n            print \'time is ok to enter\'\n        if time  in self.user.get_available_time():\n            print \'you have time to go\'\n        return True\n    def _thinking_about_method(self, vehicle):\n        """\n        - check if vehicle is available\n        """\n        #assume that vehicle is ready\n        return \'vehicle is ready\'\n\n    def _thinking_(self):\n        time_result =  self._thinking_about_time_at_destination(self.to_do_list[\'time\'])\n        vehicle_result = self._thinking_about_method(self.to_do_list[\'vehicle\'])\n        if time_result and vehicle_result:\n            time_travel = self._calculate_how_long_does_it_take(self.to_do_list[\'vehicle\'])\n            if self._thinking_about_time_at_destination(self.to_do_list[\'time\'] + time_travel):\n                return \'you could go there\'\n            else:\n                return \'there s not enough time to get there\'\n\n\n\n\n    def initialize_place_info(self, place):\n        """\n        get information about this talk from db or session\n        """\n        related_name = [\'there\', \'that place\',\'it\']\n        if session.place == place or place in related_name:\n            #same place\n            self.place = place_obj(session.place)\n        elif session.place == None:\n            self.place = place_obj(place)\n\n        #load information from session .\n        self.to_do_list[\'time\'] = session.time_to_go\n        self.to_do_list[\'vehicle\'] = session.by_what\n        self.expected_saying = session.expected_saying\n\n    def create_response(self):\n        """\n        create question for AI\n        """\n        if self.to_do_list[\'time\'] == None:\n            message = \'ask about time\'\n            session.time_to_go = message\n            self.expected_saying =\'time\'\n            session.expected_saying = \'time\'\n            return message\n        elif self.to_do_list[\'vehicle\'] ==None:\n            message = \'ask method to go\'\n            session.by_what = message\n            self.expected_saying =\'vehicle\'\n            session.expected_saying = \'vehicle\'\n            return message\n        else:\n            return self._thinking_()\n\n    def _handler_new_saying(self):\n        question_msg = self.create_response()\n        return question_msg\n\n    def _handler_expected_saying(self, intention, value):\n        self.to_do_list[self.expected_saying] = value\n        #clear expected saying\n        self.expected_saying = None\n        session.expected_saying = None\n\n        response_msg =  self.create_response()\n        session.time_to_go = self.to_do_list[\'time\']\n        session.by_what = self.to_do_list[\'vehicle\']\n        return response_msg\n\n    def _calculate_distance_from_user(self):\n        #self.place.where_is_it() - self.user.get_position()\n        return \'5km\'\n    def _calculate_how_long_does_it_take(self, vehicle):\n        return \'1h\'\n\n    def handle_user_saying(self, intention, value):\n        """\n        1.asnwer appropriate info\n        """\n        if self.expected_saying == intention:\n            msg = self._handler_expected_saying(intention, value)\n        else:\n            msg = self._handler_intention_of_question(intention)\n        return msg\n\n    def _handler_intention_of_question(self, intention):\n\n        if intention == \'where_is_it\':\n            return self.place.where_is_it()\n        elif intention == \'how_far_is_it\':\n            return self._calculate_distance_from_user()\n        elif intention ==\'go_to_some_where\':\n            return self._handler_new_saying()\n        else:\n            return \'its not yet programed\'\n\n\n\ndef handler_user_saying(intention,place, urgent, value):\n    if session.topic_list ==None:\n        session.topic_list =[]\n    topic_info ={\'last_topic\':\'\'}\n    related_list = [\'there\',\'it\', \'that one\']\n    if value in related_list or session.expected_saying == intention:\n        #old topic\n        #question = handle_go_to_some_where(intention, place, urgent, value)\n        handler = session.topic_list[0][\'last_topic\'](place)\n        question = handler.handle_user_saying(intention,value)\n        return question\n    else:\n        # new topic\n        handler = go_to_place(place)\n        question = handler.handle_user_saying(intention,value)\n        topic_info[\'last_topic\']=go_to_place\n        session.topic_list.append(topic_info)\n        return question\n\n\n\n\ndef ask_and_get_answer(question):\n    if question ==\'ask about time\':\n        return \'3AM\'\n    elif question ==\'ask method to go\':\n        return \'bike\'\n\ndef handler_user_answer(answer):\n    if answer ==\'3AM\':\n        intention =\'time\'\n        value =\'3AM\'\n        handler = go_to_place(\'\')\n        handler.handle_user_saying(intention,value)\n    elif answer ==\'bike\':\n        intention = \'vehicle\'\n        value = \'bike\'\n        handler = go_to_place(\'\')\n        handler.handle_user_saying(intention,value)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(handle_user_saying_json)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Documents/learnEnglish/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 453, in <module>\n  File "/Users/mac/Documents/learnEnglish/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 162, in handle_user_saying_json\n    value = entity[\'taken_place\'][0][\'value\']\nKeyError: \'taken_place\'\n'
p11
s.