(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'target_name'"
p3
sS'layer'
p4
S'/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nfrom topic_handler import *\nfrom intent_def import *\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    redirect(URL(\'talk\'))\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n\ndef talk():\n    print\'start\'\n    #initialize session storage info\n\n    return dict()\n\ndef test_STT():\n    return dict()\n\n\n\n\n\n\ndef handle_user_saying_json():\n    """\n\n    """\n    if not session.topic_list:\n        session.topic_list =[]\n\n    import json\n    data = request.vars.keys()[0]\n    json_data = json.loads(data)\n    msg = handle_topic_data(json_data)\n    return msg\n\n\ndef handle_topic_data(json_data):\n    """\n    - check if user start new topic\n    - check if user still talk about same topic\n    """\n    intent = json_data[\'outcomes\'][0][\'intent\']\n    """\n    if session.expected_saying == intent:\n        #get last topic handler\n        #handle old topic\n        msg = handle_intent(session.topic_list[-1], json_data)\n        pass\n    else:\n        #new topic\n        clear_session_info()\n        msg = handle_intent(intent, json_data)\n    """\n    msg = handle_intent(intent, json_data)\n\n    return msg\n\n\ndef handle_intent(intent, json_data):\n    """\n    handle ajax call from user\n    """\n    if session.scenario_flag == True:\n        """\n        correct AI information should be initialized here\n        """\n        human_object = human_obj(\'ai\')\n    if intent == TO_GO_SOMEWHERE:\n        msg = handler_go_to_some_where(json_data)\n    elif intent == ASK_AGE:\n        msg = handler_talk_about_user(json_data)\n    elif intent == ASK_NAME:\n        msg = handler_talk_about_user(json_data)\n    elif intent == ASK_JOB:\n        msg = handler_talk_about_user(json_data)\n    elif intent == ASK_OPINION_ABOUT_SOMETHING:\n        #msg = handler_talk_about_user(json_data)\n        msg = ask_opinion_about_sth(json_data).return_msg()\n    elif intent == GREETING:\n        msg = greeting_handler(json_data).return_msg()\n    elif intent == OFFER_HELP:\n        msg = receive_offer_help_handler(json_data).return_msg()\n    elif intent == TIME_INFO:\n        msg = time_info_handler(json_data).return_msg()\n    elif intent == INTRODUCE_MYSELF:\n        msg = introduce_myself_handler(json_data).return_msg()\n    elif intent == ASK_DURATION:\n        msg = ask_duration_handler(json_data).return_msg()\n    elif intent == ASK_CONTACT_INFO:\n        msg = ask_contact_info_handler(json_data).return_msg()\n\n    elif intent == ASK_WHAT_TO_DO:\n        msg = \'no idea\'\n    elif intent == ASK_HOBBY:\n        msg = \'nothing\'\n    else:\n        msg = get_answer(json_data[\'outcomes\'][0][\'intent\'])\n\n    #session.topic_list.append(intent)\n    return msg\n\ndef handle_user_saying():\n    return get_asnwer(request.vars.info)\n\n\n\ndef get_answer(intention):\n    if \'ask_name\' in intention:\n        return \'im Huy\'\n    elif \'ask_relationship\' in intention:\n        return \'im not. But i have a girl friend now\'\n    elif \'ask_if_someone_have_a_meal\' in  intention:\n        return \'im looking forward to my delicious dinner\'\n    elif \'ask_when_have_a_meal\' in intention:\n        return \'i cant remember\'\n    elif \'ask_job\' in intention:\n        return " i\'m a software engineer"\n    elif \'ask_company\' in intention:\n        return "im working for vkx company"\n\n    return \'Sorry, currently i could talk about my job, my age only\'\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\n\n\n\n\n\n\ndef clear_session_info():\n    session.time_to_go = None\n    session.by_what = None\n    session.expected_saying = None\n\ndef handler_go_to_some_where(json_data):\n    intent = json_data[\'outcomes\'][0][\'intent\']\n    entity = json_data[\'outcomes\'][0][\'entities\']\n    value =\'\'\n    if intent != TO_GO_SOMEWHERE:\n        # different intent in topic go_to_somewhere\n        handler = go_to_place(session.place)\n    else:\n        # new request about place\n        place = entity[\'target_place\'][0][\'value\']\n        handler = go_to_place(place)\n    question = handler.handle_user_saying(intent,entity)\n    return question\n\ndef handler_talk_about_user( json_data):\n    intent = json_data[\'outcomes\'][0][\'intent\']\n    handler = talk_about_people(\'huy\')\n    msg = handler.handler_user_saying(intent)\n\n    return msg\n\n\ndef ask_and_get_answer(question):\n    if question ==\'ask about time\':\n        return \'3AM\'\n    elif question ==\'ask method to go\':\n        return \'bike\'\n\ndef handler_user_answer(answer):\n    if answer ==\'3AM\':\n        intention =\'time\'\n        value =\'3AM\'\n        handler = go_to_place(\'\')\n        handler.handle_user_saying(intention,value)\n    elif answer ==\'bike\':\n        intention = \'vehicle\'\n        value = \'bike\'\n        handler = go_to_place(\'\')\n        handler.handle_user_saying(intention,value)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(handle_user_saying_json)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Documents/learnEnglish/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 248, in <module>\n  File "/Users/mac/Documents/learnEnglish/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 71, in handle_user_saying_json\n    msg = handle_topic_data(json_data)\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 92, in handle_topic_data\n    msg = handle_intent(intent, json_data)\n  File "/Users/mac/Documents/learnEnglish/applications/welcome/controllers/default.py", line 116, in handle_intent\n    msg = ask_opinion_about_sth(json_data).return_msg()\n  File "applications/welcome/modules/topic_handler.py", line 112, in __init__\n    self.target = self.get_target_info()\n  File "applications/welcome/modules/topic_handler.py", line 123, in get_target_info\n    target_name = entity[TARGET_NAME][0][\'value\']\nKeyError: \'target_name\'\n'
p11
s.