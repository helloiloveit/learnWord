(dp1
S'output'
p2
S"<class 'sqlite3.IntegrityError'> foreign key constraint failed"
p3
sS'layer'
p4
S'/Users/mac/Dropbox/Webdevelopment/web2py/applications/learnWord/controllers/inputword.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport json\nimport logging\n\nlog = logging.getLogger("h")\nlog.setLevel(logging.DEBUG)\n\nfrom ConstantDefinition import *\ntry:\n    import json\nexcept ImportError:\n    from gluon.contrib import simplejson as json\nfrom facebook import GraphAPI, GraphAPIError\nfrom gluon.contrib.login_methods.oauth20_account import OAuthAccount\n\n\n\n\ndef convert_record_list_to_list(record_list):\n    temp_list = []\n    for unit in record_list:\n        temp_list.append(unit.word)\n    return temp_list\n\ndef get_list_of_similar_word():\n    word_list = db(db.word_tbl).select()\n    word_list = convert_record_list_to_list(word_list)\n    print word_list\n\n    month_start = request.vars.word_info\n    print \'word = \'\n    print month_start\n    print\' month start\'\n    print month_start\n    selected = [m for m in word_list if m.startswith(month_start)]\n    print\' result\'\n    print selected\n    return selected\n\ndef word_validation():\n    if not request.vars.word_info: return \'\'\n    selected = get_list_of_similar_word()\n    #save word to session\n    session.word_store = request.vars.word_info\n\n\n    return DIV(*[DIV(k,\n                     _onclick="jQuery(\'#word\').val(\'%s\')" % k,\n                     _onmouseover="this.style.backgroundColor=\'yellow\'",\n                     _onmouseout="this.style.backgroundColor=\'white\'"\n                     ) for k in selected])\n\n\n\ndef user():\n    return dict(form = auth())\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #redirect(URL(r = request, f= \'blog\', args = 3))\n    user = auth.user\n    print user\n    return dict()\n\ndef post_question():\n    data_group = [{\'type\':\'now\',"data":""},{\'type\':\'future\',"data":""}]\n    return json.dumps(data_group)\n\n\n\n\ndef article():\n    """\n    Display blog by id\n    """\n    log.info("request.vars = %s", request.args[0])\n    log.info("request.vars = %s",request.vars)\n\n\n\n    if request.args[0] == \'post_comment\':\n        log.info(\'post a comment\')\n        post_comment(request.vars.questionId, request.vars.editor1, auth.user.id)\n        redirect(URL(r = request, f= \'article\', args = request.vars.questionId))\n\n    else:\n        log.info(\'show article with comment\')\n        log.info(\'id = %s\', request.args[0])\n\n        try:\n            question = db(db.question_tbl.id == int(request.args[0])).select()[0]\n        except:\n            log.error(\'cant query a blog from db\')\n            question = None\n        comment_list = show_question(request.args[0])\n\n        return dict(item = question, comment_list = comment_list)\n\n\ndef show_question(question_id):\n\n    comment_list = db(db.comment_tbl.question_info == question_id).select()\n    return  comment_list\n\n\ndef post_comment(question_id, comment_info, user_id):\n    log.info("post_comment")\n\n    log.info("session.user = %s", auth.user)\n    log.info("auth.user.id = %s", user_id)\n\n\n\n    try:\n        comment_id = db.comment_tbl.insert(comment_info = comment_info,\n                                question_info = question_id,\n                                author_info = user_id\n                                )\n        log.info(\'successfully create a comment_tbl\')\n\n\n    except:\n        log.error(\'cant create comment_tbl\')\n\n\n@auth.requires_login()\ndef edit_article():\n    """\n    Edit blog\n    """\n    log.info("edit artchile")\n    log.info("request.vars 0= %s", request.args[0])\n    log.info("request.vars = %s", request.args)\n    id_info = request.args[0]\n\n    article_class_list = db(db.article_tag).select()\n    log.info("article_class = %s", article_class_list)\n\n    try:\n        blog_item = db(db.blog.id == int(id_info)).select()[0]\n    except:\n        log.error(\'cant query a blog from db\')\n        blog_item = None\n\n\n\n    if request.vars.editor1:\n        article_id = get_article_id(request.vars.article_class)\n        log.info("article-id = %s", article_id)\n        id =db(db.blog.id == int(request.args[0])).update(\n            article_type = article_id,\n            article_header = request.vars.article_header,\n            article_introduction = request.vars.article_introduction,\n            story = request.vars.editor1\n        )\n        redirect(URL(r = request, f= \'article\', args = [request.args[0]]))\n\n    log.info("blog_item = %s",blog_item)\n    return dict(article = blog_item, article_class_list = article_class_list)\n\n        \ndef delete_article():\n    selection = request.vars\n    log.info(\'selection = %s\', selection[\'selection\'])\n    log.info(\'id = %s\', request.args[0])\n    id_info = request.args[0]\n    if selection[\'selection\'] == "YES":\n        log.info("delete post")\n        db(db.question_tbl.id == int(request.args[0])).delete()\n        redirect(URL(r = request, f= \'article_list\'))\n    elif selection[\'selection\'] == "NO":\n        redirect(URL(r = request, f= \'article\', args = [request.args[0]]))\n    return dict()\n\n#@auth.requires_login()\n#@auth.requires_login()\ndef check_example():\n    log.info("post_example")\n    """\n    months = [\'There is now a mood of deepening pessimism about/over the economy\',\n              \'An underlying pessimism infuses all her novels\',\n              \'An underlying pessimism infuses all her novels\',\n              \'The tone of the meeting was very pessimistic\',\n              \'The doctors are pessimistic (= not hopeful) about his chances of recovery\']\n    """\n    log.info("request.vars = %s",request.vars)\n\n    try:\n        select_option = request.vars["meanning_option"]\n    except:\n        select_option = \'option3\'\n        log.error("no select option..user hasnt click on option ")\n        #return "var x=$(\'#word_meanning_explain_1\'); x.html(\'\');"\n\n    print session.display_word_id\n    example_list = db(db.example_tbl.word_id == session.display_word_id).select()\n    print example_list\n    example = select_example_to_display(example_list)\n    #import pdb;pdb.set_trace()\n    print example\n    select_option = check_display_position(select_option)\n    print select_option\n    #return json.dumps(request.vars.tag_info)\n    if select_option == "option1":\n        id_info = "word_meanning_explain_1"\n        return "var x=$(\'#word_meanning_explain_1\'); x.html(\'%s\');" % example.replace("\'","\\\\\'")\n    elif select_option =="option2":\n        id_info = "word_meanning_explain_2"\n        return "var x=$(\'#word_meanning_explain_2\'); x.html(\'%s\');" % example.replace("\'","\\\\\'")\n\n    #return "var x=$(\'#word_meanning_explain_1\'); x.html(\'%s\');" % example.replace("\'","\\\\\'")\n\ndef check_display_position(select_option):\n    if select_option == "option1" or select_option == "option2":\n        return select_option\n    else:\n        #update for correct position later\n        return "option1"\n\ndef select_example_to_display(example_list):\n    from random import choice\n    temp_vaar = choice(example_list)\n    return temp_vaar.example\n\ndef word_meanning_for_test():\n    word_meanning_info1 = "the amount of space between two places"\n    word_meanning_info2 = "a person or organization that supplies goods to shops and companies"\n    return [word_meanning_info1, word_meanning_info2]\n#@auth.requires_login()\ndef next_word():\n    log.info("post_example")\n    months = [\'Distance\',\n              \'infuses \',\n              \' underlying \',\n              \' pessimistic\',\n              \' doctors \']\n\n    return_word = select_next_word_to_display()\n    #return json.dumps(request.vars.tag_info)\n    test_list = word_meanning_for_test()\n    print test_list\n    return "var x=$(\'#word_info\'); x.html(\'%s\'); var x2=$(\'#word_meanning_explain_1\'); x2.html(\'%s\');  var x3=$(\'#word_meanning_explain_2\'); x3.html(\'%s\');" % (return_word.replace("\'","\\\\\'") ,  test_list[0].replace("\'","\\\\\'"), test_list[1].replace("\'","\\\\\'"))\n\n\ndef select_next_word_to_display():\n    word_list = db(db.word_tbl).select()\n    print word_list\n    return_word = select_word_to_display(word_list)\n    #store word id to session.\n    session.display_word_id = return_word.id\n\n    return return_word.word\n\ndef get_word():\n\n    """\n    get word to display to user\n    """\n\n    word_list = db(db.word_tbl).select()\n    print word_list\n\n\n    return_word = select_word_to_display(word_list)\n\n    #store word id to session.\n    session.display_word_id = return_word.id\n\n    return dict(item = return_word.word)\n\ndef check_progress():\n\n    """\n    get word to display to user\n    """\n\n    word_list = db(db.word_tbl).select()\n    print word_list\n\n\n    return_word = select_word_to_display(word_list)\n\n    #store word id to session.\n    session.display_word_id = return_word.id\n    word_meanning_info1 = "the amount of space between two places"\n    word_meanning_info2 = "a person or organization that supplies goods to shops and companies"\n    return dict(item = return_word.word, word_meanning_info1=word_meanning_info1, word_meanning_info2=word_meanning_info2)\n\ndef select_word_to_display(word_list):\n    from random import choice\n    temp_vaar = choice(word_list)\n    return temp_vaar\n\ndef get_header(text):\n    """\n        get header of article\n    """\n    header_position =text.find("<p>&nbsp;</p>")\n    log.info("header_position = %d", header_position)\n    header_text =  request.vars.editor1[:header_position]\n    return header_text\n\n\ndef post_article_class():\n    log.info("request.vars = %s",request.vars.article_class)\n    article_classes = request.vars.article_class\n    article_class_list = db(db.article_class).select()\n    log.info("article = %s ",article_class_list )\n\n\n    result= ""\n    if len(article_classes):\n        for item in article_classes:\n            log.info("item = %s", item)\n            try:\n                db(db.article_class.id == article_class_list[article_classes.index(item)].id).update(name=item)\n            except:\n                log.error("database error")\n                result = "failure"\n    else:\n        log.error("no infor about article class")\n\n    result = "update article class successfully"\n\n    return dict(result = result)\n\n\n\n\ndef article_class():\n    """\n        Create, change , update article_class\n    """\n    article_class_list = db(db.article_class).select()\n    log.info("article_class = %s", article_class_list.__doc__ )\n\n    if len(article_class_list) > 0:\n            log.info(" article class is existed..display it")\n    else:\n        log.info("create database:w")\n        #create database\n        db.article_class.insert(name ="")\n        db.article_class.insert(name ="")\n        db.article_class.insert(name ="")\n        db.article_class.insert(name ="")\n\n    article_class_list = db(db.article_class).select()\n    log.info("article_class = %s", article_class_list )\n    return dict(article_class_list = article_class_list)\n\ndef get_article_id(name):\n    """\n    return id\n    """\n    article_class_list = db(db.article_tag).select()\n    log.info("article_class = %s", article_class_list)\n    for item in article_class_list:\n        if item.name == name:\n            return item.id\n    return False;\n\n\n@auth.requires_login()\ndef post():\n    log.info("request.vars = %s",request.vars)\n    #save example for later store in database\n    session.tag_list_store = []\n    session.example_list_store = []\n\n    return dict(article_tag_list ="" )\n\n\n@auth.requires_login()\ndef add_word():\n    log.info("add new word")\n    log.info("request.vars = %s",request.vars.sheets)\n    result = json.loads(request.vars.sheets)\n    print \'result after json\'\n    print result\n    print len(result)\n    for temp in result:\n        print temp\n    #import pdb;pdb.set_trace()\n    word_id = add_word_to_db()\n    add_example_to_db(word_id, request.vars.sheets)\n    #import pdb;pdb.set_trace()\n    #return json.dumps(request.vars.tag_info)\n    temp_var = \'lalal\'\n    return "var x=$(\'#target\'); x.html(x.html()+ \'%s\');" % temp_var\n\n@auth.requires_login()\ndef post_example():\n    log.info("post_example")\n    log.info("request.vars = %s",request.vars.example_sentence)\n\n    session.example_list_store.append(request.vars.example_sentence)\n    log.info("session.tag list = %s", session.example_list_store)\n    #return json.dumps(request.vars.tag_info)\n    return "var x=$(\'#example_added\'); x.html(x.html()+\'<br>\' + \'%s\' );" % request.vars.example_sentence.replace("\'","\\\\\'")\n\n### add word\ndef add_example_to_db(word_id, example_list):\n    log.info("add example to db")\n    print example_list\n    import pdb;pdb.set_trace()\n    log.info("len of example list = %d", len(example_list))\n    for sentence in example_list:\n        example_id = db.example_tbl.insert(example = sentence,\n                                       word_id = word_id)\n    #import pdb;pdb.set_trace()\n\ndef add_word_to_db():\n    log.info("add word to db")\n    import pdb;pdb.set_trace()\n    #print auth.user.id\n    word_id = db.word_tbl.insert(word = session.word_store,\n                                 user_info = auth.user)\n    return word_id\n\n\n@auth.requires_login()\ndef post_article():\n    log.info("post")\n    log.info("request.vars = %s",request.vars)\n    example1 = request.vars.example1\n\n\n    log.info("session.user = %s", auth.user)\n    log.info("header_text = %s", header_text)\n    log.info("auth.user.id = %s", auth.user.id)\n\n    add_word_to_db()\n\n    """\n    question_id =""\n\n    try:\n        question_id = db.question_tbl.insert(word = content_text,\n                                example = header_text,\n                                writer = auth.user.id)\n        log.info(\'successfully create a question_tbl\')\n\n\n    except:\n        log.error(\'cant create question_tbl\')\n    try:\n        tag_id = db.tag_tbl.insert(tag_info = articleId,\n                            question_info = id_temp)\n    except:\n        log.error(\'cant create tag for question\')\n    redirect(URL(r = request, f= \'article\', args = question_id))\n    """\n    redirect(URL(r = request, f= \'post\'))\n    return dict()\n\n\n\n\n#those code is for manage meta data not using right now\n# using flickr for photo uploading\n@auth.requires_login()\ndef show_image():\n\n    image_data = db(db.pic_store).select()\n    #image = image_data.pic\n\n    form = SQLFORM(db.pic_store)\n    if form.process().accepted:\n        response.flash = \'movie info is posted\'\n    return dict(form = form)\n@auth.requires_login()\ndef manage_image():\n    grid = SQLFORM.smartgrid(db.pic_store)\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef manage_article_tag():\n    grid = SQLFORM.smartgrid(db.article_tag)\n    return dict(grid=grid)\nresponse._vars=response._caller(add_word)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/applications/learnWord/controllers/inputword.py", line 496, in <module>\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/gluon/tools.py", line 3239, in f\n    return action(*a, **b)\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/applications/learnWord/controllers/inputword.py", line 400, in add_word\n    word_id = add_word_to_db()\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/applications/learnWord/controllers/inputword.py", line 433, in add_word_to_db\n    user_info = auth.user)\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/gluon/dal.py", line 9003, in insert\n    ret =  self._db._adapter.insert(self, self._listify(fields))\n  File "/Users/mac/Dropbox/Webdevelopment/web2py/gluon/dal.py", line 1311, in insert\n    raise e\nIntegrityError: foreign key constraint failed\n'
p11
s.